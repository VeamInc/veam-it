<?php

/**
 * Base class that represents a row from the 'app' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Dec 13 16:31:05 2017
 *
 * @package    lib.model.om
 */
abstract class BaseApp extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AppPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the client_id field.
	 * @var        int
	 */
	protected $client_id;

	/**
	 * The value for the mcn_id field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $mcn_id;

	/**
	 * The value for the getglue_object field.
	 * @var        string
	 */
	protected $getglue_object;

	/**
	 * The value for the getglue_source field.
	 * @var        string
	 */
	protected $getglue_source;

	/**
	 * The value for the facebook_app field.
	 * @var        string
	 */
	protected $facebook_app;

	/**
	 * The value for the twitter_consumer_key field.
	 * @var        string
	 */
	protected $twitter_consumer_key;

	/**
	 * The value for the twitter_consumer_secret field.
	 * @var        string
	 */
	protected $twitter_consumer_secret;

	/**
	 * The value for the iab_public field.
	 * @var        string
	 */
	protected $iab_public;

	/**
	 * The value for the kiip_app_key field.
	 * @var        string
	 */
	protected $kiip_app_key;

	/**
	 * The value for the kiip_app_secret field.
	 * @var        string
	 */
	protected $kiip_app_secret;

	/**
	 * The value for the kiip_android_app_key field.
	 * @var        string
	 */
	protected $kiip_android_app_key;

	/**
	 * The value for the kiip_android_app_secret field.
	 * @var        string
	 */
	protected $kiip_android_app_secret;

	/**
	 * The value for the secret field.
	 * @var        string
	 */
	protected $secret;

	/**
	 * The value for the category field.
	 * @var        string
	 */
	protected $category;

	/**
	 * The value for the sub_category field.
	 * @var        string
	 */
	protected $sub_category;

	/**
	 * The value for the store_app_name field.
	 * @var        string
	 */
	protected $store_app_name;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the key_word field.
	 * @var        string
	 */
	protected $key_word;

	/**
	 * The value for the icon_image field.
	 * @var        string
	 */
	protected $icon_image;

	/**
	 * The value for the splash_image field.
	 * @var        string
	 */
	protected $splash_image;

	/**
	 * The value for the background_image field.
	 * @var        string
	 */
	protected $background_image;

	/**
	 * The value for the screen_shot_1 field.
	 * @var        string
	 */
	protected $screen_shot_1;

	/**
	 * The value for the screen_shot_2 field.
	 * @var        string
	 */
	protected $screen_shot_2;

	/**
	 * The value for the screen_shot_3 field.
	 * @var        string
	 */
	protected $screen_shot_3;

	/**
	 * The value for the screen_shot_4 field.
	 * @var        string
	 */
	protected $screen_shot_4;

	/**
	 * The value for the screen_shot_5 field.
	 * @var        string
	 */
	protected $screen_shot_5;

	/**
	 * The value for the apk_url field.
	 * @var        string
	 */
	protected $apk_url;

	/**
	 * The value for the status field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $status;

	/**
	 * The value for the status_text field.
	 * @var        string
	 */
	protected $status_text;

	/**
	 * The value for the modify field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $modify;

	/**
	 * The value for the current_process field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $current_process;

	/**
	 * The value for the picture_notification field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $picture_notification;

	/**
	 * The value for the terms_accepted_at field.
	 * @var        string
	 */
	protected $terms_accepted_at;

	/**
	 * The value for the del_flg field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $del_flg;

	/**
	 * The value for the released_at field.
	 * @var        string
	 */
	protected $released_at;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'AppPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->mcn_id = 0;
		$this->status = 0;
		$this->modify = 0;
		$this->current_process = 0;
		$this->picture_notification = 0;
		$this->del_flg = 0;
	}

	/**
	 * Initializes internal state of BaseApp object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [client_id] column value.
	 * 
	 * @return     int
	 */
	public function getClientId()
	{
		return $this->client_id;
	}

	/**
	 * Get the [mcn_id] column value.
	 * 
	 * @return     int
	 */
	public function getMcnId()
	{
		return $this->mcn_id;
	}

	/**
	 * Get the [getglue_object] column value.
	 * 
	 * @return     string
	 */
	public function getGetglueObject()
	{
		return $this->getglue_object;
	}

	/**
	 * Get the [getglue_source] column value.
	 * 
	 * @return     string
	 */
	public function getGetglueSource()
	{
		return $this->getglue_source;
	}

	/**
	 * Get the [facebook_app] column value.
	 * 
	 * @return     string
	 */
	public function getFacebookApp()
	{
		return $this->facebook_app;
	}

	/**
	 * Get the [twitter_consumer_key] column value.
	 * 
	 * @return     string
	 */
	public function getTwitterConsumerKey()
	{
		return $this->twitter_consumer_key;
	}

	/**
	 * Get the [twitter_consumer_secret] column value.
	 * 
	 * @return     string
	 */
	public function getTwitterConsumerSecret()
	{
		return $this->twitter_consumer_secret;
	}

	/**
	 * Get the [iab_public] column value.
	 * 
	 * @return     string
	 */
	public function getIabPublic()
	{
		return $this->iab_public;
	}

	/**
	 * Get the [kiip_app_key] column value.
	 * 
	 * @return     string
	 */
	public function getKiipAppKey()
	{
		return $this->kiip_app_key;
	}

	/**
	 * Get the [kiip_app_secret] column value.
	 * 
	 * @return     string
	 */
	public function getKiipAppSecret()
	{
		return $this->kiip_app_secret;
	}

	/**
	 * Get the [kiip_android_app_key] column value.
	 * 
	 * @return     string
	 */
	public function getKiipAndroidAppKey()
	{
		return $this->kiip_android_app_key;
	}

	/**
	 * Get the [kiip_android_app_secret] column value.
	 * 
	 * @return     string
	 */
	public function getKiipAndroidAppSecret()
	{
		return $this->kiip_android_app_secret;
	}

	/**
	 * Get the [secret] column value.
	 * 
	 * @return     string
	 */
	public function getSecret()
	{
		return $this->secret;
	}

	/**
	 * Get the [category] column value.
	 * 
	 * @return     string
	 */
	public function getCategory()
	{
		return $this->category;
	}

	/**
	 * Get the [sub_category] column value.
	 * 
	 * @return     string
	 */
	public function getSubCategory()
	{
		return $this->sub_category;
	}

	/**
	 * Get the [store_app_name] column value.
	 * 
	 * @return     string
	 */
	public function getStoreAppName()
	{
		return $this->store_app_name;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [key_word] column value.
	 * 
	 * @return     string
	 */
	public function getKeyWord()
	{
		return $this->key_word;
	}

	/**
	 * Get the [icon_image] column value.
	 * 
	 * @return     string
	 */
	public function getIconImage()
	{
		return $this->icon_image;
	}

	/**
	 * Get the [splash_image] column value.
	 * 
	 * @return     string
	 */
	public function getSplashImage()
	{
		return $this->splash_image;
	}

	/**
	 * Get the [background_image] column value.
	 * 
	 * @return     string
	 */
	public function getBackgroundImage()
	{
		return $this->background_image;
	}

	/**
	 * Get the [screen_shot_1] column value.
	 * 
	 * @return     string
	 */
	public function getScreenShot1()
	{
		return $this->screen_shot_1;
	}

	/**
	 * Get the [screen_shot_2] column value.
	 * 
	 * @return     string
	 */
	public function getScreenShot2()
	{
		return $this->screen_shot_2;
	}

	/**
	 * Get the [screen_shot_3] column value.
	 * 
	 * @return     string
	 */
	public function getScreenShot3()
	{
		return $this->screen_shot_3;
	}

	/**
	 * Get the [screen_shot_4] column value.
	 * 
	 * @return     string
	 */
	public function getScreenShot4()
	{
		return $this->screen_shot_4;
	}

	/**
	 * Get the [screen_shot_5] column value.
	 * 
	 * @return     string
	 */
	public function getScreenShot5()
	{
		return $this->screen_shot_5;
	}

	/**
	 * Get the [apk_url] column value.
	 * 
	 * @return     string
	 */
	public function getApkUrl()
	{
		return $this->apk_url;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     int
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [status_text] column value.
	 * 
	 * @return     string
	 */
	public function getStatusText()
	{
		return $this->status_text;
	}

	/**
	 * Get the [modify] column value.
	 * 
	 * @return     int
	 */
	public function getModify()
	{
		return $this->modify;
	}

	/**
	 * Get the [current_process] column value.
	 * 
	 * @return     int
	 */
	public function getCurrentProcess()
	{
		return $this->current_process;
	}

	/**
	 * Get the [picture_notification] column value.
	 * 
	 * @return     int
	 */
	public function getPictureNotification()
	{
		return $this->picture_notification;
	}

	/**
	 * Get the [optionally formatted] temporal [terms_accepted_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTermsAcceptedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->terms_accepted_at === null) {
			return null;
		}


		if ($this->terms_accepted_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->terms_accepted_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->terms_accepted_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [del_flg] column value.
	 * 
	 * @return     int
	 */
	public function getDelFlg()
	{
		return $this->del_flg;
	}

	/**
	 * Get the [optionally formatted] temporal [released_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getReleasedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->released_at === null) {
			return null;
		}


		if ($this->released_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->released_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->released_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = AppPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = AppPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [client_id] column.
	 * 
	 * @param      int $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setClientId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->client_id !== $v) {
			$this->client_id = $v;
			$this->modifiedColumns[] = AppPeer::CLIENT_ID;
		}

		return $this;
	} // setClientId()

	/**
	 * Set the value of [mcn_id] column.
	 * 
	 * @param      int $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setMcnId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mcn_id !== $v || $this->isNew()) {
			$this->mcn_id = $v;
			$this->modifiedColumns[] = AppPeer::MCN_ID;
		}

		return $this;
	} // setMcnId()

	/**
	 * Set the value of [getglue_object] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setGetglueObject($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->getglue_object !== $v) {
			$this->getglue_object = $v;
			$this->modifiedColumns[] = AppPeer::GETGLUE_OBJECT;
		}

		return $this;
	} // setGetglueObject()

	/**
	 * Set the value of [getglue_source] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setGetglueSource($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->getglue_source !== $v) {
			$this->getglue_source = $v;
			$this->modifiedColumns[] = AppPeer::GETGLUE_SOURCE;
		}

		return $this;
	} // setGetglueSource()

	/**
	 * Set the value of [facebook_app] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setFacebookApp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->facebook_app !== $v) {
			$this->facebook_app = $v;
			$this->modifiedColumns[] = AppPeer::FACEBOOK_APP;
		}

		return $this;
	} // setFacebookApp()

	/**
	 * Set the value of [twitter_consumer_key] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setTwitterConsumerKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->twitter_consumer_key !== $v) {
			$this->twitter_consumer_key = $v;
			$this->modifiedColumns[] = AppPeer::TWITTER_CONSUMER_KEY;
		}

		return $this;
	} // setTwitterConsumerKey()

	/**
	 * Set the value of [twitter_consumer_secret] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setTwitterConsumerSecret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->twitter_consumer_secret !== $v) {
			$this->twitter_consumer_secret = $v;
			$this->modifiedColumns[] = AppPeer::TWITTER_CONSUMER_SECRET;
		}

		return $this;
	} // setTwitterConsumerSecret()

	/**
	 * Set the value of [iab_public] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setIabPublic($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->iab_public !== $v) {
			$this->iab_public = $v;
			$this->modifiedColumns[] = AppPeer::IAB_PUBLIC;
		}

		return $this;
	} // setIabPublic()

	/**
	 * Set the value of [kiip_app_key] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setKiipAppKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kiip_app_key !== $v) {
			$this->kiip_app_key = $v;
			$this->modifiedColumns[] = AppPeer::KIIP_APP_KEY;
		}

		return $this;
	} // setKiipAppKey()

	/**
	 * Set the value of [kiip_app_secret] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setKiipAppSecret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kiip_app_secret !== $v) {
			$this->kiip_app_secret = $v;
			$this->modifiedColumns[] = AppPeer::KIIP_APP_SECRET;
		}

		return $this;
	} // setKiipAppSecret()

	/**
	 * Set the value of [kiip_android_app_key] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setKiipAndroidAppKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kiip_android_app_key !== $v) {
			$this->kiip_android_app_key = $v;
			$this->modifiedColumns[] = AppPeer::KIIP_ANDROID_APP_KEY;
		}

		return $this;
	} // setKiipAndroidAppKey()

	/**
	 * Set the value of [kiip_android_app_secret] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setKiipAndroidAppSecret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kiip_android_app_secret !== $v) {
			$this->kiip_android_app_secret = $v;
			$this->modifiedColumns[] = AppPeer::KIIP_ANDROID_APP_SECRET;
		}

		return $this;
	} // setKiipAndroidAppSecret()

	/**
	 * Set the value of [secret] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setSecret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->secret !== $v) {
			$this->secret = $v;
			$this->modifiedColumns[] = AppPeer::SECRET;
		}

		return $this;
	} // setSecret()

	/**
	 * Set the value of [category] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setCategory($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->category !== $v) {
			$this->category = $v;
			$this->modifiedColumns[] = AppPeer::CATEGORY;
		}

		return $this;
	} // setCategory()

	/**
	 * Set the value of [sub_category] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setSubCategory($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sub_category !== $v) {
			$this->sub_category = $v;
			$this->modifiedColumns[] = AppPeer::SUB_CATEGORY;
		}

		return $this;
	} // setSubCategory()

	/**
	 * Set the value of [store_app_name] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setStoreAppName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->store_app_name !== $v) {
			$this->store_app_name = $v;
			$this->modifiedColumns[] = AppPeer::STORE_APP_NAME;
		}

		return $this;
	} // setStoreAppName()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = AppPeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [key_word] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setKeyWord($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->key_word !== $v) {
			$this->key_word = $v;
			$this->modifiedColumns[] = AppPeer::KEY_WORD;
		}

		return $this;
	} // setKeyWord()

	/**
	 * Set the value of [icon_image] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setIconImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->icon_image !== $v) {
			$this->icon_image = $v;
			$this->modifiedColumns[] = AppPeer::ICON_IMAGE;
		}

		return $this;
	} // setIconImage()

	/**
	 * Set the value of [splash_image] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setSplashImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->splash_image !== $v) {
			$this->splash_image = $v;
			$this->modifiedColumns[] = AppPeer::SPLASH_IMAGE;
		}

		return $this;
	} // setSplashImage()

	/**
	 * Set the value of [background_image] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setBackgroundImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->background_image !== $v) {
			$this->background_image = $v;
			$this->modifiedColumns[] = AppPeer::BACKGROUND_IMAGE;
		}

		return $this;
	} // setBackgroundImage()

	/**
	 * Set the value of [screen_shot_1] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setScreenShot1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screen_shot_1 !== $v) {
			$this->screen_shot_1 = $v;
			$this->modifiedColumns[] = AppPeer::SCREEN_SHOT_1;
		}

		return $this;
	} // setScreenShot1()

	/**
	 * Set the value of [screen_shot_2] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setScreenShot2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screen_shot_2 !== $v) {
			$this->screen_shot_2 = $v;
			$this->modifiedColumns[] = AppPeer::SCREEN_SHOT_2;
		}

		return $this;
	} // setScreenShot2()

	/**
	 * Set the value of [screen_shot_3] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setScreenShot3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screen_shot_3 !== $v) {
			$this->screen_shot_3 = $v;
			$this->modifiedColumns[] = AppPeer::SCREEN_SHOT_3;
		}

		return $this;
	} // setScreenShot3()

	/**
	 * Set the value of [screen_shot_4] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setScreenShot4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screen_shot_4 !== $v) {
			$this->screen_shot_4 = $v;
			$this->modifiedColumns[] = AppPeer::SCREEN_SHOT_4;
		}

		return $this;
	} // setScreenShot4()

	/**
	 * Set the value of [screen_shot_5] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setScreenShot5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screen_shot_5 !== $v) {
			$this->screen_shot_5 = $v;
			$this->modifiedColumns[] = AppPeer::SCREEN_SHOT_5;
		}

		return $this;
	} // setScreenShot5()

	/**
	 * Set the value of [apk_url] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setApkUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apk_url !== $v) {
			$this->apk_url = $v;
			$this->modifiedColumns[] = AppPeer::APK_URL;
		}

		return $this;
	} // setApkUrl()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      int $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status !== $v || $this->isNew()) {
			$this->status = $v;
			$this->modifiedColumns[] = AppPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [status_text] column.
	 * 
	 * @param      string $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setStatusText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status_text !== $v) {
			$this->status_text = $v;
			$this->modifiedColumns[] = AppPeer::STATUS_TEXT;
		}

		return $this;
	} // setStatusText()

	/**
	 * Set the value of [modify] column.
	 * 
	 * @param      int $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setModify($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->modify !== $v || $this->isNew()) {
			$this->modify = $v;
			$this->modifiedColumns[] = AppPeer::MODIFY;
		}

		return $this;
	} // setModify()

	/**
	 * Set the value of [current_process] column.
	 * 
	 * @param      int $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setCurrentProcess($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->current_process !== $v || $this->isNew()) {
			$this->current_process = $v;
			$this->modifiedColumns[] = AppPeer::CURRENT_PROCESS;
		}

		return $this;
	} // setCurrentProcess()

	/**
	 * Set the value of [picture_notification] column.
	 * 
	 * @param      int $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setPictureNotification($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->picture_notification !== $v || $this->isNew()) {
			$this->picture_notification = $v;
			$this->modifiedColumns[] = AppPeer::PICTURE_NOTIFICATION;
		}

		return $this;
	} // setPictureNotification()

	/**
	 * Sets the value of [terms_accepted_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     App The current object (for fluent API support)
	 */
	public function setTermsAcceptedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->terms_accepted_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->terms_accepted_at !== null && $tmpDt = new DateTime($this->terms_accepted_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->terms_accepted_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AppPeer::TERMS_ACCEPTED_AT;
			}
		} // if either are not null

		return $this;
	} // setTermsAcceptedAt()

	/**
	 * Set the value of [del_flg] column.
	 * 
	 * @param      int $v new value
	 * @return     App The current object (for fluent API support)
	 */
	public function setDelFlg($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->del_flg !== $v || $this->isNew()) {
			$this->del_flg = $v;
			$this->modifiedColumns[] = AppPeer::DEL_FLG;
		}

		return $this;
	} // setDelFlg()

	/**
	 * Sets the value of [released_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     App The current object (for fluent API support)
	 */
	public function setReleasedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->released_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->released_at !== null && $tmpDt = new DateTime($this->released_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->released_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AppPeer::RELEASED_AT;
			}
		} // if either are not null

		return $this;
	} // setReleasedAt()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     App The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AppPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     App The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AppPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->mcn_id !== 0) {
				return false;
			}

			if ($this->status !== 0) {
				return false;
			}

			if ($this->modify !== 0) {
				return false;
			}

			if ($this->current_process !== 0) {
				return false;
			}

			if ($this->picture_notification !== 0) {
				return false;
			}

			if ($this->del_flg !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->client_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->mcn_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->getglue_object = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->getglue_source = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->facebook_app = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->twitter_consumer_key = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->twitter_consumer_secret = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->iab_public = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->kiip_app_key = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->kiip_app_secret = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->kiip_android_app_key = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->kiip_android_app_secret = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->secret = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->category = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->sub_category = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->store_app_name = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->description = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->key_word = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->icon_image = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->splash_image = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->background_image = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->screen_shot_1 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->screen_shot_2 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->screen_shot_3 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->screen_shot_4 = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->screen_shot_5 = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->apk_url = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->status = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->status_text = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->modify = ($row[$startcol + 31] !== null) ? (int) $row[$startcol + 31] : null;
			$this->current_process = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->picture_notification = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
			$this->terms_accepted_at = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->del_flg = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->released_at = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->created_at = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->updated_at = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 39; // 39 = AppPeer::NUM_COLUMNS - AppPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating App object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AppPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AppPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AppPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseApp:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				AppPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseApp:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AppPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseApp:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(AppPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(AppPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseApp:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				AppPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AppPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AppPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AppPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = AppPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AppPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getClientId();
				break;
			case 3:
				return $this->getMcnId();
				break;
			case 4:
				return $this->getGetglueObject();
				break;
			case 5:
				return $this->getGetglueSource();
				break;
			case 6:
				return $this->getFacebookApp();
				break;
			case 7:
				return $this->getTwitterConsumerKey();
				break;
			case 8:
				return $this->getTwitterConsumerSecret();
				break;
			case 9:
				return $this->getIabPublic();
				break;
			case 10:
				return $this->getKiipAppKey();
				break;
			case 11:
				return $this->getKiipAppSecret();
				break;
			case 12:
				return $this->getKiipAndroidAppKey();
				break;
			case 13:
				return $this->getKiipAndroidAppSecret();
				break;
			case 14:
				return $this->getSecret();
				break;
			case 15:
				return $this->getCategory();
				break;
			case 16:
				return $this->getSubCategory();
				break;
			case 17:
				return $this->getStoreAppName();
				break;
			case 18:
				return $this->getDescription();
				break;
			case 19:
				return $this->getKeyWord();
				break;
			case 20:
				return $this->getIconImage();
				break;
			case 21:
				return $this->getSplashImage();
				break;
			case 22:
				return $this->getBackgroundImage();
				break;
			case 23:
				return $this->getScreenShot1();
				break;
			case 24:
				return $this->getScreenShot2();
				break;
			case 25:
				return $this->getScreenShot3();
				break;
			case 26:
				return $this->getScreenShot4();
				break;
			case 27:
				return $this->getScreenShot5();
				break;
			case 28:
				return $this->getApkUrl();
				break;
			case 29:
				return $this->getStatus();
				break;
			case 30:
				return $this->getStatusText();
				break;
			case 31:
				return $this->getModify();
				break;
			case 32:
				return $this->getCurrentProcess();
				break;
			case 33:
				return $this->getPictureNotification();
				break;
			case 34:
				return $this->getTermsAcceptedAt();
				break;
			case 35:
				return $this->getDelFlg();
				break;
			case 36:
				return $this->getReleasedAt();
				break;
			case 37:
				return $this->getCreatedAt();
				break;
			case 38:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AppPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getClientId(),
			$keys[3] => $this->getMcnId(),
			$keys[4] => $this->getGetglueObject(),
			$keys[5] => $this->getGetglueSource(),
			$keys[6] => $this->getFacebookApp(),
			$keys[7] => $this->getTwitterConsumerKey(),
			$keys[8] => $this->getTwitterConsumerSecret(),
			$keys[9] => $this->getIabPublic(),
			$keys[10] => $this->getKiipAppKey(),
			$keys[11] => $this->getKiipAppSecret(),
			$keys[12] => $this->getKiipAndroidAppKey(),
			$keys[13] => $this->getKiipAndroidAppSecret(),
			$keys[14] => $this->getSecret(),
			$keys[15] => $this->getCategory(),
			$keys[16] => $this->getSubCategory(),
			$keys[17] => $this->getStoreAppName(),
			$keys[18] => $this->getDescription(),
			$keys[19] => $this->getKeyWord(),
			$keys[20] => $this->getIconImage(),
			$keys[21] => $this->getSplashImage(),
			$keys[22] => $this->getBackgroundImage(),
			$keys[23] => $this->getScreenShot1(),
			$keys[24] => $this->getScreenShot2(),
			$keys[25] => $this->getScreenShot3(),
			$keys[26] => $this->getScreenShot4(),
			$keys[27] => $this->getScreenShot5(),
			$keys[28] => $this->getApkUrl(),
			$keys[29] => $this->getStatus(),
			$keys[30] => $this->getStatusText(),
			$keys[31] => $this->getModify(),
			$keys[32] => $this->getCurrentProcess(),
			$keys[33] => $this->getPictureNotification(),
			$keys[34] => $this->getTermsAcceptedAt(),
			$keys[35] => $this->getDelFlg(),
			$keys[36] => $this->getReleasedAt(),
			$keys[37] => $this->getCreatedAt(),
			$keys[38] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AppPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setClientId($value);
				break;
			case 3:
				$this->setMcnId($value);
				break;
			case 4:
				$this->setGetglueObject($value);
				break;
			case 5:
				$this->setGetglueSource($value);
				break;
			case 6:
				$this->setFacebookApp($value);
				break;
			case 7:
				$this->setTwitterConsumerKey($value);
				break;
			case 8:
				$this->setTwitterConsumerSecret($value);
				break;
			case 9:
				$this->setIabPublic($value);
				break;
			case 10:
				$this->setKiipAppKey($value);
				break;
			case 11:
				$this->setKiipAppSecret($value);
				break;
			case 12:
				$this->setKiipAndroidAppKey($value);
				break;
			case 13:
				$this->setKiipAndroidAppSecret($value);
				break;
			case 14:
				$this->setSecret($value);
				break;
			case 15:
				$this->setCategory($value);
				break;
			case 16:
				$this->setSubCategory($value);
				break;
			case 17:
				$this->setStoreAppName($value);
				break;
			case 18:
				$this->setDescription($value);
				break;
			case 19:
				$this->setKeyWord($value);
				break;
			case 20:
				$this->setIconImage($value);
				break;
			case 21:
				$this->setSplashImage($value);
				break;
			case 22:
				$this->setBackgroundImage($value);
				break;
			case 23:
				$this->setScreenShot1($value);
				break;
			case 24:
				$this->setScreenShot2($value);
				break;
			case 25:
				$this->setScreenShot3($value);
				break;
			case 26:
				$this->setScreenShot4($value);
				break;
			case 27:
				$this->setScreenShot5($value);
				break;
			case 28:
				$this->setApkUrl($value);
				break;
			case 29:
				$this->setStatus($value);
				break;
			case 30:
				$this->setStatusText($value);
				break;
			case 31:
				$this->setModify($value);
				break;
			case 32:
				$this->setCurrentProcess($value);
				break;
			case 33:
				$this->setPictureNotification($value);
				break;
			case 34:
				$this->setTermsAcceptedAt($value);
				break;
			case 35:
				$this->setDelFlg($value);
				break;
			case 36:
				$this->setReleasedAt($value);
				break;
			case 37:
				$this->setCreatedAt($value);
				break;
			case 38:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AppPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setClientId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setMcnId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setGetglueObject($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setGetglueSource($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFacebookApp($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setTwitterConsumerKey($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTwitterConsumerSecret($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIabPublic($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setKiipAppKey($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setKiipAppSecret($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setKiipAndroidAppKey($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setKiipAndroidAppSecret($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setSecret($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCategory($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setSubCategory($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setStoreAppName($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDescription($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setKeyWord($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setIconImage($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setSplashImage($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setBackgroundImage($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setScreenShot1($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setScreenShot2($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setScreenShot3($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setScreenShot4($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setScreenShot5($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setApkUrl($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setStatus($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setStatusText($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setModify($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCurrentProcess($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setPictureNotification($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setTermsAcceptedAt($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setDelFlg($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setReleasedAt($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setCreatedAt($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setUpdatedAt($arr[$keys[38]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AppPeer::DATABASE_NAME);

		if ($this->isColumnModified(AppPeer::ID)) $criteria->add(AppPeer::ID, $this->id);
		if ($this->isColumnModified(AppPeer::NAME)) $criteria->add(AppPeer::NAME, $this->name);
		if ($this->isColumnModified(AppPeer::CLIENT_ID)) $criteria->add(AppPeer::CLIENT_ID, $this->client_id);
		if ($this->isColumnModified(AppPeer::MCN_ID)) $criteria->add(AppPeer::MCN_ID, $this->mcn_id);
		if ($this->isColumnModified(AppPeer::GETGLUE_OBJECT)) $criteria->add(AppPeer::GETGLUE_OBJECT, $this->getglue_object);
		if ($this->isColumnModified(AppPeer::GETGLUE_SOURCE)) $criteria->add(AppPeer::GETGLUE_SOURCE, $this->getglue_source);
		if ($this->isColumnModified(AppPeer::FACEBOOK_APP)) $criteria->add(AppPeer::FACEBOOK_APP, $this->facebook_app);
		if ($this->isColumnModified(AppPeer::TWITTER_CONSUMER_KEY)) $criteria->add(AppPeer::TWITTER_CONSUMER_KEY, $this->twitter_consumer_key);
		if ($this->isColumnModified(AppPeer::TWITTER_CONSUMER_SECRET)) $criteria->add(AppPeer::TWITTER_CONSUMER_SECRET, $this->twitter_consumer_secret);
		if ($this->isColumnModified(AppPeer::IAB_PUBLIC)) $criteria->add(AppPeer::IAB_PUBLIC, $this->iab_public);
		if ($this->isColumnModified(AppPeer::KIIP_APP_KEY)) $criteria->add(AppPeer::KIIP_APP_KEY, $this->kiip_app_key);
		if ($this->isColumnModified(AppPeer::KIIP_APP_SECRET)) $criteria->add(AppPeer::KIIP_APP_SECRET, $this->kiip_app_secret);
		if ($this->isColumnModified(AppPeer::KIIP_ANDROID_APP_KEY)) $criteria->add(AppPeer::KIIP_ANDROID_APP_KEY, $this->kiip_android_app_key);
		if ($this->isColumnModified(AppPeer::KIIP_ANDROID_APP_SECRET)) $criteria->add(AppPeer::KIIP_ANDROID_APP_SECRET, $this->kiip_android_app_secret);
		if ($this->isColumnModified(AppPeer::SECRET)) $criteria->add(AppPeer::SECRET, $this->secret);
		if ($this->isColumnModified(AppPeer::CATEGORY)) $criteria->add(AppPeer::CATEGORY, $this->category);
		if ($this->isColumnModified(AppPeer::SUB_CATEGORY)) $criteria->add(AppPeer::SUB_CATEGORY, $this->sub_category);
		if ($this->isColumnModified(AppPeer::STORE_APP_NAME)) $criteria->add(AppPeer::STORE_APP_NAME, $this->store_app_name);
		if ($this->isColumnModified(AppPeer::DESCRIPTION)) $criteria->add(AppPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(AppPeer::KEY_WORD)) $criteria->add(AppPeer::KEY_WORD, $this->key_word);
		if ($this->isColumnModified(AppPeer::ICON_IMAGE)) $criteria->add(AppPeer::ICON_IMAGE, $this->icon_image);
		if ($this->isColumnModified(AppPeer::SPLASH_IMAGE)) $criteria->add(AppPeer::SPLASH_IMAGE, $this->splash_image);
		if ($this->isColumnModified(AppPeer::BACKGROUND_IMAGE)) $criteria->add(AppPeer::BACKGROUND_IMAGE, $this->background_image);
		if ($this->isColumnModified(AppPeer::SCREEN_SHOT_1)) $criteria->add(AppPeer::SCREEN_SHOT_1, $this->screen_shot_1);
		if ($this->isColumnModified(AppPeer::SCREEN_SHOT_2)) $criteria->add(AppPeer::SCREEN_SHOT_2, $this->screen_shot_2);
		if ($this->isColumnModified(AppPeer::SCREEN_SHOT_3)) $criteria->add(AppPeer::SCREEN_SHOT_3, $this->screen_shot_3);
		if ($this->isColumnModified(AppPeer::SCREEN_SHOT_4)) $criteria->add(AppPeer::SCREEN_SHOT_4, $this->screen_shot_4);
		if ($this->isColumnModified(AppPeer::SCREEN_SHOT_5)) $criteria->add(AppPeer::SCREEN_SHOT_5, $this->screen_shot_5);
		if ($this->isColumnModified(AppPeer::APK_URL)) $criteria->add(AppPeer::APK_URL, $this->apk_url);
		if ($this->isColumnModified(AppPeer::STATUS)) $criteria->add(AppPeer::STATUS, $this->status);
		if ($this->isColumnModified(AppPeer::STATUS_TEXT)) $criteria->add(AppPeer::STATUS_TEXT, $this->status_text);
		if ($this->isColumnModified(AppPeer::MODIFY)) $criteria->add(AppPeer::MODIFY, $this->modify);
		if ($this->isColumnModified(AppPeer::CURRENT_PROCESS)) $criteria->add(AppPeer::CURRENT_PROCESS, $this->current_process);
		if ($this->isColumnModified(AppPeer::PICTURE_NOTIFICATION)) $criteria->add(AppPeer::PICTURE_NOTIFICATION, $this->picture_notification);
		if ($this->isColumnModified(AppPeer::TERMS_ACCEPTED_AT)) $criteria->add(AppPeer::TERMS_ACCEPTED_AT, $this->terms_accepted_at);
		if ($this->isColumnModified(AppPeer::DEL_FLG)) $criteria->add(AppPeer::DEL_FLG, $this->del_flg);
		if ($this->isColumnModified(AppPeer::RELEASED_AT)) $criteria->add(AppPeer::RELEASED_AT, $this->released_at);
		if ($this->isColumnModified(AppPeer::CREATED_AT)) $criteria->add(AppPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(AppPeer::UPDATED_AT)) $criteria->add(AppPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AppPeer::DATABASE_NAME);

		$criteria->add(AppPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of App (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setClientId($this->client_id);

		$copyObj->setMcnId($this->mcn_id);

		$copyObj->setGetglueObject($this->getglue_object);

		$copyObj->setGetglueSource($this->getglue_source);

		$copyObj->setFacebookApp($this->facebook_app);

		$copyObj->setTwitterConsumerKey($this->twitter_consumer_key);

		$copyObj->setTwitterConsumerSecret($this->twitter_consumer_secret);

		$copyObj->setIabPublic($this->iab_public);

		$copyObj->setKiipAppKey($this->kiip_app_key);

		$copyObj->setKiipAppSecret($this->kiip_app_secret);

		$copyObj->setKiipAndroidAppKey($this->kiip_android_app_key);

		$copyObj->setKiipAndroidAppSecret($this->kiip_android_app_secret);

		$copyObj->setSecret($this->secret);

		$copyObj->setCategory($this->category);

		$copyObj->setSubCategory($this->sub_category);

		$copyObj->setStoreAppName($this->store_app_name);

		$copyObj->setDescription($this->description);

		$copyObj->setKeyWord($this->key_word);

		$copyObj->setIconImage($this->icon_image);

		$copyObj->setSplashImage($this->splash_image);

		$copyObj->setBackgroundImage($this->background_image);

		$copyObj->setScreenShot1($this->screen_shot_1);

		$copyObj->setScreenShot2($this->screen_shot_2);

		$copyObj->setScreenShot3($this->screen_shot_3);

		$copyObj->setScreenShot4($this->screen_shot_4);

		$copyObj->setScreenShot5($this->screen_shot_5);

		$copyObj->setApkUrl($this->apk_url);

		$copyObj->setStatus($this->status);

		$copyObj->setStatusText($this->status_text);

		$copyObj->setModify($this->modify);

		$copyObj->setCurrentProcess($this->current_process);

		$copyObj->setPictureNotification($this->picture_notification);

		$copyObj->setTermsAcceptedAt($this->terms_accepted_at);

		$copyObj->setDelFlg($this->del_flg);

		$copyObj->setReleasedAt($this->released_at);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     App Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AppPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AppPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseApp:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseApp::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseApp
