<?php

/**
 * Base class that represents a row from the 'theme' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Dec 13 16:31:11 2017
 *
 * @package    lib.model.om
 */
abstract class BaseTheme extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ThemePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the app_id field.
	 * @var        int
	 */
	protected $app_id;

	/**
	 * The value for the product field.
	 * @var        string
	 */
	protected $product;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the base_url field.
	 * @var        string
	 */
	protected $base_url;

	/**
	 * The value for the thumbnail_name field.
	 * @var        string
	 */
	protected $thumbnail_name;

	/**
	 * The value for the screenshots field.
	 * @var        string
	 */
	protected $screenshots;

	/**
	 * The value for the images field.
	 * @var        string
	 */
	protected $images;

	/**
	 * The value for the top_color field.
	 * @var        string
	 */
	protected $top_color;

	/**
	 * The value for the top_text_color field.
	 * @var        string
	 */
	protected $top_text_color;

	/**
	 * The value for the top_text_font field.
	 * @var        string
	 */
	protected $top_text_font;

	/**
	 * The value for the top_text_size field.
	 * @var        string
	 */
	protected $top_text_size;

	/**
	 * The value for the base_text_color field.
	 * @var        string
	 */
	protected $base_text_color;

	/**
	 * The value for the link_text_color field.
	 * @var        string
	 */
	protected $link_text_color;

	/**
	 * The value for the background_color field.
	 * @var        string
	 */
	protected $background_color;

	/**
	 * The value for the mask_color field.
	 * @var        string
	 */
	protected $mask_color;

	/**
	 * The value for the post_text_color field.
	 * @var        string
	 */
	protected $post_text_color;

	/**
	 * The value for the status_bar_color field.
	 * @var        string
	 */
	protected $status_bar_color;

	/**
	 * The value for the status_bar_style field.
	 * @var        int
	 */
	protected $status_bar_style;

	/**
	 * The value for the separator_color field.
	 * @var        string
	 */
	protected $separator_color;

	/**
	 * The value for the text1_color field.
	 * @var        string
	 */
	protected $text1_color;

	/**
	 * The value for the text2_color field.
	 * @var        string
	 */
	protected $text2_color;

	/**
	 * The value for the text3_color field.
	 * @var        string
	 */
	protected $text3_color;

	/**
	 * The value for the question_header_color field.
	 * @var        string
	 */
	protected $question_header_color;

	/**
	 * The value for the question_header_text_color field.
	 * @var        string
	 */
	protected $question_header_text_color;

	/**
	 * The value for the price field.
	 * Note: this column has a database default value of: 99
	 * @var        int
	 */
	protected $price;

	/**
	 * The value for the del_flg field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $del_flg;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ThemePeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->price = 99;
		$this->del_flg = 0;
	}

	/**
	 * Initializes internal state of BaseTheme object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [app_id] column value.
	 * 
	 * @return     int
	 */
	public function getAppId()
	{
		return $this->app_id;
	}

	/**
	 * Get the [product] column value.
	 * 
	 * @return     string
	 */
	public function getProduct()
	{
		return $this->product;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [base_url] column value.
	 * 
	 * @return     string
	 */
	public function getBaseUrl()
	{
		return $this->base_url;
	}

	/**
	 * Get the [thumbnail_name] column value.
	 * 
	 * @return     string
	 */
	public function getThumbnailName()
	{
		return $this->thumbnail_name;
	}

	/**
	 * Get the [screenshots] column value.
	 * 
	 * @return     string
	 */
	public function getScreenshots()
	{
		return $this->screenshots;
	}

	/**
	 * Get the [images] column value.
	 * 
	 * @return     string
	 */
	public function getImages()
	{
		return $this->images;
	}

	/**
	 * Get the [top_color] column value.
	 * 
	 * @return     string
	 */
	public function getTopColor()
	{
		return $this->top_color;
	}

	/**
	 * Get the [top_text_color] column value.
	 * 
	 * @return     string
	 */
	public function getTopTextColor()
	{
		return $this->top_text_color;
	}

	/**
	 * Get the [top_text_font] column value.
	 * 
	 * @return     string
	 */
	public function getTopTextFont()
	{
		return $this->top_text_font;
	}

	/**
	 * Get the [top_text_size] column value.
	 * 
	 * @return     string
	 */
	public function getTopTextSize()
	{
		return $this->top_text_size;
	}

	/**
	 * Get the [base_text_color] column value.
	 * 
	 * @return     string
	 */
	public function getBaseTextColor()
	{
		return $this->base_text_color;
	}

	/**
	 * Get the [link_text_color] column value.
	 * 
	 * @return     string
	 */
	public function getLinkTextColor()
	{
		return $this->link_text_color;
	}

	/**
	 * Get the [background_color] column value.
	 * 
	 * @return     string
	 */
	public function getBackgroundColor()
	{
		return $this->background_color;
	}

	/**
	 * Get the [mask_color] column value.
	 * 
	 * @return     string
	 */
	public function getMaskColor()
	{
		return $this->mask_color;
	}

	/**
	 * Get the [post_text_color] column value.
	 * 
	 * @return     string
	 */
	public function getPostTextColor()
	{
		return $this->post_text_color;
	}

	/**
	 * Get the [status_bar_color] column value.
	 * 
	 * @return     string
	 */
	public function getStatusBarColor()
	{
		return $this->status_bar_color;
	}

	/**
	 * Get the [status_bar_style] column value.
	 * 
	 * @return     int
	 */
	public function getStatusBarStyle()
	{
		return $this->status_bar_style;
	}

	/**
	 * Get the [separator_color] column value.
	 * 
	 * @return     string
	 */
	public function getSeparatorColor()
	{
		return $this->separator_color;
	}

	/**
	 * Get the [text1_color] column value.
	 * 
	 * @return     string
	 */
	public function getText1Color()
	{
		return $this->text1_color;
	}

	/**
	 * Get the [text2_color] column value.
	 * 
	 * @return     string
	 */
	public function getText2Color()
	{
		return $this->text2_color;
	}

	/**
	 * Get the [text3_color] column value.
	 * 
	 * @return     string
	 */
	public function getText3Color()
	{
		return $this->text3_color;
	}

	/**
	 * Get the [question_header_color] column value.
	 * 
	 * @return     string
	 */
	public function getQuestionHeaderColor()
	{
		return $this->question_header_color;
	}

	/**
	 * Get the [question_header_text_color] column value.
	 * 
	 * @return     string
	 */
	public function getQuestionHeaderTextColor()
	{
		return $this->question_header_text_color;
	}

	/**
	 * Get the [price] column value.
	 * 
	 * @return     int
	 */
	public function getPrice()
	{
		return $this->price;
	}

	/**
	 * Get the [del_flg] column value.
	 * 
	 * @return     int
	 */
	public function getDelFlg()
	{
		return $this->del_flg;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ThemePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [app_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setAppId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->app_id !== $v) {
			$this->app_id = $v;
			$this->modifiedColumns[] = ThemePeer::APP_ID;
		}

		return $this;
	} // setAppId()

	/**
	 * Set the value of [product] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setProduct($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->product !== $v) {
			$this->product = $v;
			$this->modifiedColumns[] = ThemePeer::PRODUCT;
		}

		return $this;
	} // setProduct()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = ThemePeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = ThemePeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [base_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setBaseUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->base_url !== $v) {
			$this->base_url = $v;
			$this->modifiedColumns[] = ThemePeer::BASE_URL;
		}

		return $this;
	} // setBaseUrl()

	/**
	 * Set the value of [thumbnail_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setThumbnailName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumbnail_name !== $v) {
			$this->thumbnail_name = $v;
			$this->modifiedColumns[] = ThemePeer::THUMBNAIL_NAME;
		}

		return $this;
	} // setThumbnailName()

	/**
	 * Set the value of [screenshots] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setScreenshots($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->screenshots !== $v) {
			$this->screenshots = $v;
			$this->modifiedColumns[] = ThemePeer::SCREENSHOTS;
		}

		return $this;
	} // setScreenshots()

	/**
	 * Set the value of [images] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setImages($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->images !== $v) {
			$this->images = $v;
			$this->modifiedColumns[] = ThemePeer::IMAGES;
		}

		return $this;
	} // setImages()

	/**
	 * Set the value of [top_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setTopColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->top_color !== $v) {
			$this->top_color = $v;
			$this->modifiedColumns[] = ThemePeer::TOP_COLOR;
		}

		return $this;
	} // setTopColor()

	/**
	 * Set the value of [top_text_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setTopTextColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->top_text_color !== $v) {
			$this->top_text_color = $v;
			$this->modifiedColumns[] = ThemePeer::TOP_TEXT_COLOR;
		}

		return $this;
	} // setTopTextColor()

	/**
	 * Set the value of [top_text_font] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setTopTextFont($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->top_text_font !== $v) {
			$this->top_text_font = $v;
			$this->modifiedColumns[] = ThemePeer::TOP_TEXT_FONT;
		}

		return $this;
	} // setTopTextFont()

	/**
	 * Set the value of [top_text_size] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setTopTextSize($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->top_text_size !== $v) {
			$this->top_text_size = $v;
			$this->modifiedColumns[] = ThemePeer::TOP_TEXT_SIZE;
		}

		return $this;
	} // setTopTextSize()

	/**
	 * Set the value of [base_text_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setBaseTextColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->base_text_color !== $v) {
			$this->base_text_color = $v;
			$this->modifiedColumns[] = ThemePeer::BASE_TEXT_COLOR;
		}

		return $this;
	} // setBaseTextColor()

	/**
	 * Set the value of [link_text_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setLinkTextColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->link_text_color !== $v) {
			$this->link_text_color = $v;
			$this->modifiedColumns[] = ThemePeer::LINK_TEXT_COLOR;
		}

		return $this;
	} // setLinkTextColor()

	/**
	 * Set the value of [background_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setBackgroundColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->background_color !== $v) {
			$this->background_color = $v;
			$this->modifiedColumns[] = ThemePeer::BACKGROUND_COLOR;
		}

		return $this;
	} // setBackgroundColor()

	/**
	 * Set the value of [mask_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setMaskColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mask_color !== $v) {
			$this->mask_color = $v;
			$this->modifiedColumns[] = ThemePeer::MASK_COLOR;
		}

		return $this;
	} // setMaskColor()

	/**
	 * Set the value of [post_text_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setPostTextColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->post_text_color !== $v) {
			$this->post_text_color = $v;
			$this->modifiedColumns[] = ThemePeer::POST_TEXT_COLOR;
		}

		return $this;
	} // setPostTextColor()

	/**
	 * Set the value of [status_bar_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setStatusBarColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status_bar_color !== $v) {
			$this->status_bar_color = $v;
			$this->modifiedColumns[] = ThemePeer::STATUS_BAR_COLOR;
		}

		return $this;
	} // setStatusBarColor()

	/**
	 * Set the value of [status_bar_style] column.
	 * 
	 * @param      int $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setStatusBarStyle($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status_bar_style !== $v) {
			$this->status_bar_style = $v;
			$this->modifiedColumns[] = ThemePeer::STATUS_BAR_STYLE;
		}

		return $this;
	} // setStatusBarStyle()

	/**
	 * Set the value of [separator_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setSeparatorColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->separator_color !== $v) {
			$this->separator_color = $v;
			$this->modifiedColumns[] = ThemePeer::SEPARATOR_COLOR;
		}

		return $this;
	} // setSeparatorColor()

	/**
	 * Set the value of [text1_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setText1Color($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->text1_color !== $v) {
			$this->text1_color = $v;
			$this->modifiedColumns[] = ThemePeer::TEXT1_COLOR;
		}

		return $this;
	} // setText1Color()

	/**
	 * Set the value of [text2_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setText2Color($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->text2_color !== $v) {
			$this->text2_color = $v;
			$this->modifiedColumns[] = ThemePeer::TEXT2_COLOR;
		}

		return $this;
	} // setText2Color()

	/**
	 * Set the value of [text3_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setText3Color($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->text3_color !== $v) {
			$this->text3_color = $v;
			$this->modifiedColumns[] = ThemePeer::TEXT3_COLOR;
		}

		return $this;
	} // setText3Color()

	/**
	 * Set the value of [question_header_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setQuestionHeaderColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->question_header_color !== $v) {
			$this->question_header_color = $v;
			$this->modifiedColumns[] = ThemePeer::QUESTION_HEADER_COLOR;
		}

		return $this;
	} // setQuestionHeaderColor()

	/**
	 * Set the value of [question_header_text_color] column.
	 * 
	 * @param      string $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setQuestionHeaderTextColor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->question_header_text_color !== $v) {
			$this->question_header_text_color = $v;
			$this->modifiedColumns[] = ThemePeer::QUESTION_HEADER_TEXT_COLOR;
		}

		return $this;
	} // setQuestionHeaderTextColor()

	/**
	 * Set the value of [price] column.
	 * 
	 * @param      int $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setPrice($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->price !== $v || $this->isNew()) {
			$this->price = $v;
			$this->modifiedColumns[] = ThemePeer::PRICE;
		}

		return $this;
	} // setPrice()

	/**
	 * Set the value of [del_flg] column.
	 * 
	 * @param      int $v new value
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setDelFlg($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->del_flg !== $v || $this->isNew()) {
			$this->del_flg = $v;
			$this->modifiedColumns[] = ThemePeer::DEL_FLG;
		}

		return $this;
	} // setDelFlg()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ThemePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Theme The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ThemePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->price !== 99) {
				return false;
			}

			if ($this->del_flg !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->app_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->product = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->title = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->description = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->base_url = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->thumbnail_name = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->screenshots = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->images = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->top_color = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->top_text_color = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->top_text_font = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->top_text_size = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->base_text_color = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->link_text_color = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->background_color = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->mask_color = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->post_text_color = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->status_bar_color = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->status_bar_style = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->separator_color = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->text1_color = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->text2_color = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->text3_color = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->question_header_color = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->question_header_text_color = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->price = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->del_flg = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->created_at = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->updated_at = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 30; // 30 = ThemePeer::NUM_COLUMNS - ThemePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Theme object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ThemePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ThemePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ThemePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTheme:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ThemePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTheme:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ThemePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTheme:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(ThemePeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(ThemePeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTheme:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ThemePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ThemePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ThemePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ThemePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ThemePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ThemePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getAppId();
				break;
			case 2:
				return $this->getProduct();
				break;
			case 3:
				return $this->getTitle();
				break;
			case 4:
				return $this->getDescription();
				break;
			case 5:
				return $this->getBaseUrl();
				break;
			case 6:
				return $this->getThumbnailName();
				break;
			case 7:
				return $this->getScreenshots();
				break;
			case 8:
				return $this->getImages();
				break;
			case 9:
				return $this->getTopColor();
				break;
			case 10:
				return $this->getTopTextColor();
				break;
			case 11:
				return $this->getTopTextFont();
				break;
			case 12:
				return $this->getTopTextSize();
				break;
			case 13:
				return $this->getBaseTextColor();
				break;
			case 14:
				return $this->getLinkTextColor();
				break;
			case 15:
				return $this->getBackgroundColor();
				break;
			case 16:
				return $this->getMaskColor();
				break;
			case 17:
				return $this->getPostTextColor();
				break;
			case 18:
				return $this->getStatusBarColor();
				break;
			case 19:
				return $this->getStatusBarStyle();
				break;
			case 20:
				return $this->getSeparatorColor();
				break;
			case 21:
				return $this->getText1Color();
				break;
			case 22:
				return $this->getText2Color();
				break;
			case 23:
				return $this->getText3Color();
				break;
			case 24:
				return $this->getQuestionHeaderColor();
				break;
			case 25:
				return $this->getQuestionHeaderTextColor();
				break;
			case 26:
				return $this->getPrice();
				break;
			case 27:
				return $this->getDelFlg();
				break;
			case 28:
				return $this->getCreatedAt();
				break;
			case 29:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ThemePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getAppId(),
			$keys[2] => $this->getProduct(),
			$keys[3] => $this->getTitle(),
			$keys[4] => $this->getDescription(),
			$keys[5] => $this->getBaseUrl(),
			$keys[6] => $this->getThumbnailName(),
			$keys[7] => $this->getScreenshots(),
			$keys[8] => $this->getImages(),
			$keys[9] => $this->getTopColor(),
			$keys[10] => $this->getTopTextColor(),
			$keys[11] => $this->getTopTextFont(),
			$keys[12] => $this->getTopTextSize(),
			$keys[13] => $this->getBaseTextColor(),
			$keys[14] => $this->getLinkTextColor(),
			$keys[15] => $this->getBackgroundColor(),
			$keys[16] => $this->getMaskColor(),
			$keys[17] => $this->getPostTextColor(),
			$keys[18] => $this->getStatusBarColor(),
			$keys[19] => $this->getStatusBarStyle(),
			$keys[20] => $this->getSeparatorColor(),
			$keys[21] => $this->getText1Color(),
			$keys[22] => $this->getText2Color(),
			$keys[23] => $this->getText3Color(),
			$keys[24] => $this->getQuestionHeaderColor(),
			$keys[25] => $this->getQuestionHeaderTextColor(),
			$keys[26] => $this->getPrice(),
			$keys[27] => $this->getDelFlg(),
			$keys[28] => $this->getCreatedAt(),
			$keys[29] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ThemePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setAppId($value);
				break;
			case 2:
				$this->setProduct($value);
				break;
			case 3:
				$this->setTitle($value);
				break;
			case 4:
				$this->setDescription($value);
				break;
			case 5:
				$this->setBaseUrl($value);
				break;
			case 6:
				$this->setThumbnailName($value);
				break;
			case 7:
				$this->setScreenshots($value);
				break;
			case 8:
				$this->setImages($value);
				break;
			case 9:
				$this->setTopColor($value);
				break;
			case 10:
				$this->setTopTextColor($value);
				break;
			case 11:
				$this->setTopTextFont($value);
				break;
			case 12:
				$this->setTopTextSize($value);
				break;
			case 13:
				$this->setBaseTextColor($value);
				break;
			case 14:
				$this->setLinkTextColor($value);
				break;
			case 15:
				$this->setBackgroundColor($value);
				break;
			case 16:
				$this->setMaskColor($value);
				break;
			case 17:
				$this->setPostTextColor($value);
				break;
			case 18:
				$this->setStatusBarColor($value);
				break;
			case 19:
				$this->setStatusBarStyle($value);
				break;
			case 20:
				$this->setSeparatorColor($value);
				break;
			case 21:
				$this->setText1Color($value);
				break;
			case 22:
				$this->setText2Color($value);
				break;
			case 23:
				$this->setText3Color($value);
				break;
			case 24:
				$this->setQuestionHeaderColor($value);
				break;
			case 25:
				$this->setQuestionHeaderTextColor($value);
				break;
			case 26:
				$this->setPrice($value);
				break;
			case 27:
				$this->setDelFlg($value);
				break;
			case 28:
				$this->setCreatedAt($value);
				break;
			case 29:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ThemePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAppId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProduct($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTitle($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDescription($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setBaseUrl($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setThumbnailName($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setScreenshots($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setImages($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTopColor($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTopTextColor($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setTopTextFont($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTopTextSize($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setBaseTextColor($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setLinkTextColor($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setBackgroundColor($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMaskColor($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPostTextColor($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setStatusBarColor($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setStatusBarStyle($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSeparatorColor($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setText1Color($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setText2Color($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setText3Color($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setQuestionHeaderColor($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setQuestionHeaderTextColor($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPrice($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setDelFlg($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCreatedAt($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setUpdatedAt($arr[$keys[29]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ThemePeer::DATABASE_NAME);

		if ($this->isColumnModified(ThemePeer::ID)) $criteria->add(ThemePeer::ID, $this->id);
		if ($this->isColumnModified(ThemePeer::APP_ID)) $criteria->add(ThemePeer::APP_ID, $this->app_id);
		if ($this->isColumnModified(ThemePeer::PRODUCT)) $criteria->add(ThemePeer::PRODUCT, $this->product);
		if ($this->isColumnModified(ThemePeer::TITLE)) $criteria->add(ThemePeer::TITLE, $this->title);
		if ($this->isColumnModified(ThemePeer::DESCRIPTION)) $criteria->add(ThemePeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(ThemePeer::BASE_URL)) $criteria->add(ThemePeer::BASE_URL, $this->base_url);
		if ($this->isColumnModified(ThemePeer::THUMBNAIL_NAME)) $criteria->add(ThemePeer::THUMBNAIL_NAME, $this->thumbnail_name);
		if ($this->isColumnModified(ThemePeer::SCREENSHOTS)) $criteria->add(ThemePeer::SCREENSHOTS, $this->screenshots);
		if ($this->isColumnModified(ThemePeer::IMAGES)) $criteria->add(ThemePeer::IMAGES, $this->images);
		if ($this->isColumnModified(ThemePeer::TOP_COLOR)) $criteria->add(ThemePeer::TOP_COLOR, $this->top_color);
		if ($this->isColumnModified(ThemePeer::TOP_TEXT_COLOR)) $criteria->add(ThemePeer::TOP_TEXT_COLOR, $this->top_text_color);
		if ($this->isColumnModified(ThemePeer::TOP_TEXT_FONT)) $criteria->add(ThemePeer::TOP_TEXT_FONT, $this->top_text_font);
		if ($this->isColumnModified(ThemePeer::TOP_TEXT_SIZE)) $criteria->add(ThemePeer::TOP_TEXT_SIZE, $this->top_text_size);
		if ($this->isColumnModified(ThemePeer::BASE_TEXT_COLOR)) $criteria->add(ThemePeer::BASE_TEXT_COLOR, $this->base_text_color);
		if ($this->isColumnModified(ThemePeer::LINK_TEXT_COLOR)) $criteria->add(ThemePeer::LINK_TEXT_COLOR, $this->link_text_color);
		if ($this->isColumnModified(ThemePeer::BACKGROUND_COLOR)) $criteria->add(ThemePeer::BACKGROUND_COLOR, $this->background_color);
		if ($this->isColumnModified(ThemePeer::MASK_COLOR)) $criteria->add(ThemePeer::MASK_COLOR, $this->mask_color);
		if ($this->isColumnModified(ThemePeer::POST_TEXT_COLOR)) $criteria->add(ThemePeer::POST_TEXT_COLOR, $this->post_text_color);
		if ($this->isColumnModified(ThemePeer::STATUS_BAR_COLOR)) $criteria->add(ThemePeer::STATUS_BAR_COLOR, $this->status_bar_color);
		if ($this->isColumnModified(ThemePeer::STATUS_BAR_STYLE)) $criteria->add(ThemePeer::STATUS_BAR_STYLE, $this->status_bar_style);
		if ($this->isColumnModified(ThemePeer::SEPARATOR_COLOR)) $criteria->add(ThemePeer::SEPARATOR_COLOR, $this->separator_color);
		if ($this->isColumnModified(ThemePeer::TEXT1_COLOR)) $criteria->add(ThemePeer::TEXT1_COLOR, $this->text1_color);
		if ($this->isColumnModified(ThemePeer::TEXT2_COLOR)) $criteria->add(ThemePeer::TEXT2_COLOR, $this->text2_color);
		if ($this->isColumnModified(ThemePeer::TEXT3_COLOR)) $criteria->add(ThemePeer::TEXT3_COLOR, $this->text3_color);
		if ($this->isColumnModified(ThemePeer::QUESTION_HEADER_COLOR)) $criteria->add(ThemePeer::QUESTION_HEADER_COLOR, $this->question_header_color);
		if ($this->isColumnModified(ThemePeer::QUESTION_HEADER_TEXT_COLOR)) $criteria->add(ThemePeer::QUESTION_HEADER_TEXT_COLOR, $this->question_header_text_color);
		if ($this->isColumnModified(ThemePeer::PRICE)) $criteria->add(ThemePeer::PRICE, $this->price);
		if ($this->isColumnModified(ThemePeer::DEL_FLG)) $criteria->add(ThemePeer::DEL_FLG, $this->del_flg);
		if ($this->isColumnModified(ThemePeer::CREATED_AT)) $criteria->add(ThemePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ThemePeer::UPDATED_AT)) $criteria->add(ThemePeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ThemePeer::DATABASE_NAME);

		$criteria->add(ThemePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Theme (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAppId($this->app_id);

		$copyObj->setProduct($this->product);

		$copyObj->setTitle($this->title);

		$copyObj->setDescription($this->description);

		$copyObj->setBaseUrl($this->base_url);

		$copyObj->setThumbnailName($this->thumbnail_name);

		$copyObj->setScreenshots($this->screenshots);

		$copyObj->setImages($this->images);

		$copyObj->setTopColor($this->top_color);

		$copyObj->setTopTextColor($this->top_text_color);

		$copyObj->setTopTextFont($this->top_text_font);

		$copyObj->setTopTextSize($this->top_text_size);

		$copyObj->setBaseTextColor($this->base_text_color);

		$copyObj->setLinkTextColor($this->link_text_color);

		$copyObj->setBackgroundColor($this->background_color);

		$copyObj->setMaskColor($this->mask_color);

		$copyObj->setPostTextColor($this->post_text_color);

		$copyObj->setStatusBarColor($this->status_bar_color);

		$copyObj->setStatusBarStyle($this->status_bar_style);

		$copyObj->setSeparatorColor($this->separator_color);

		$copyObj->setText1Color($this->text1_color);

		$copyObj->setText2Color($this->text2_color);

		$copyObj->setText3Color($this->text3_color);

		$copyObj->setQuestionHeaderColor($this->question_header_color);

		$copyObj->setQuestionHeaderTextColor($this->question_header_text_color);

		$copyObj->setPrice($this->price);

		$copyObj->setDelFlg($this->del_flg);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Theme Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ThemePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ThemePeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTheme:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTheme::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTheme
