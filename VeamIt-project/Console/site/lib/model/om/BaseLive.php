<?php

/**
 * Base class that represents a row from the 'live' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Dec 13 16:31:07 2017
 *
 * @package    lib.model.om
 */
abstract class BaseLive extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        LivePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the app_id field.
	 * @var        int
	 */
	protected $app_id;

	/**
	 * The value for the composer field.
	 * @var        string
	 */
	protected $composer;

	/**
	 * The value for the duration field.
	 * @var        int
	 */
	protected $duration;

	/**
	 * The value for the expired_at field.
	 * @var        string
	 */
	protected $expired_at;

	/**
	 * The value for the explanation field.
	 * @var        string
	 */
	protected $explanation;

	/**
	 * The value for the genre_id field.
	 * @var        int
	 */
	protected $genre_id;

	/**
	 * The value for the has_preview field.
	 * @var        int
	 */
	protected $has_preview;

	/**
	 * The value for the is_priced field.
	 * @var        int
	 */
	protected $is_priced;

	/**
	 * The value for the kind field.
	 * @var        int
	 */
	protected $kind;

	/**
	 * The value for the price field.
	 * @var        int
	 */
	protected $price;

	/**
	 * The value for the sub_title field.
	 * @var        string
	 */
	protected $sub_title;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the rating field.
	 * @var        int
	 */
	protected $rating;

	/**
	 * The value for the share_text field.
	 * @var        string
	 */
	protected $share_text;

	/**
	 * The value for the thumbnail_url field.
	 * @var        string
	 */
	protected $thumbnail_url;

	/**
	 * The value for the thumbnail_size field.
	 * @var        int
	 */
	protected $thumbnail_size;

	/**
	 * The value for the preview_url field.
	 * @var        string
	 */
	protected $preview_url;

	/**
	 * The value for the preview_size field.
	 * @var        int
	 */
	protected $preview_size;

	/**
	 * The value for the preview_key field.
	 * @var        string
	 */
	protected $preview_key;

	/**
	 * The value for the drm_preview_url field.
	 * @var        string
	 */
	protected $drm_preview_url;

	/**
	 * The value for the drm_preview_size field.
	 * @var        int
	 */
	protected $drm_preview_size;

	/**
	 * The value for the drm_preview_key field.
	 * @var        string
	 */
	protected $drm_preview_key;

	/**
	 * The value for the video_url field.
	 * @var        string
	 */
	protected $video_url;

	/**
	 * The value for the video_size field.
	 * @var        int
	 */
	protected $video_size;

	/**
	 * The value for the video_key field.
	 * @var        string
	 */
	protected $video_key;

	/**
	 * The value for the pending field.
	 * @var        int
	 */
	protected $pending;

	/**
	 * The value for the del_flg field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $del_flg;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'LivePeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->del_flg = 0;
	}

	/**
	 * Initializes internal state of BaseLive object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [app_id] column value.
	 * 
	 * @return     int
	 */
	public function getAppId()
	{
		return $this->app_id;
	}

	/**
	 * Get the [composer] column value.
	 * 
	 * @return     string
	 */
	public function getComposer()
	{
		return $this->composer;
	}

	/**
	 * Get the [duration] column value.
	 * 
	 * @return     int
	 */
	public function getDuration()
	{
		return $this->duration;
	}

	/**
	 * Get the [optionally formatted] temporal [expired_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getExpiredAt($format = 'Y-m-d H:i:s')
	{
		if ($this->expired_at === null) {
			return null;
		}


		if ($this->expired_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->expired_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->expired_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [explanation] column value.
	 * 
	 * @return     string
	 */
	public function getExplanation()
	{
		return $this->explanation;
	}

	/**
	 * Get the [genre_id] column value.
	 * 
	 * @return     int
	 */
	public function getGenreId()
	{
		return $this->genre_id;
	}

	/**
	 * Get the [has_preview] column value.
	 * 
	 * @return     int
	 */
	public function getHasPreview()
	{
		return $this->has_preview;
	}

	/**
	 * Get the [is_priced] column value.
	 * 
	 * @return     int
	 */
	public function getIsPriced()
	{
		return $this->is_priced;
	}

	/**
	 * Get the [kind] column value.
	 * 
	 * @return     int
	 */
	public function getKind()
	{
		return $this->kind;
	}

	/**
	 * Get the [price] column value.
	 * 
	 * @return     int
	 */
	public function getPrice()
	{
		return $this->price;
	}

	/**
	 * Get the [sub_title] column value.
	 * 
	 * @return     string
	 */
	public function getSubTitle()
	{
		return $this->sub_title;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [rating] column value.
	 * 
	 * @return     int
	 */
	public function getRating()
	{
		return $this->rating;
	}

	/**
	 * Get the [share_text] column value.
	 * 
	 * @return     string
	 */
	public function getShareText()
	{
		return $this->share_text;
	}

	/**
	 * Get the [thumbnail_url] column value.
	 * 
	 * @return     string
	 */
	public function getThumbnailUrl()
	{
		return $this->thumbnail_url;
	}

	/**
	 * Get the [thumbnail_size] column value.
	 * 
	 * @return     int
	 */
	public function getThumbnailSize()
	{
		return $this->thumbnail_size;
	}

	/**
	 * Get the [preview_url] column value.
	 * 
	 * @return     string
	 */
	public function getPreviewUrl()
	{
		return $this->preview_url;
	}

	/**
	 * Get the [preview_size] column value.
	 * 
	 * @return     int
	 */
	public function getPreviewSize()
	{
		return $this->preview_size;
	}

	/**
	 * Get the [preview_key] column value.
	 * 
	 * @return     string
	 */
	public function getPreviewKey()
	{
		return $this->preview_key;
	}

	/**
	 * Get the [drm_preview_url] column value.
	 * 
	 * @return     string
	 */
	public function getDrmPreviewUrl()
	{
		return $this->drm_preview_url;
	}

	/**
	 * Get the [drm_preview_size] column value.
	 * 
	 * @return     int
	 */
	public function getDrmPreviewSize()
	{
		return $this->drm_preview_size;
	}

	/**
	 * Get the [drm_preview_key] column value.
	 * 
	 * @return     string
	 */
	public function getDrmPreviewKey()
	{
		return $this->drm_preview_key;
	}

	/**
	 * Get the [video_url] column value.
	 * 
	 * @return     string
	 */
	public function getVideoUrl()
	{
		return $this->video_url;
	}

	/**
	 * Get the [video_size] column value.
	 * 
	 * @return     int
	 */
	public function getVideoSize()
	{
		return $this->video_size;
	}

	/**
	 * Get the [video_key] column value.
	 * 
	 * @return     string
	 */
	public function getVideoKey()
	{
		return $this->video_key;
	}

	/**
	 * Get the [pending] column value.
	 * 
	 * @return     int
	 */
	public function getPending()
	{
		return $this->pending;
	}

	/**
	 * Get the [del_flg] column value.
	 * 
	 * @return     int
	 */
	public function getDelFlg()
	{
		return $this->del_flg;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = LivePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [app_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setAppId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->app_id !== $v) {
			$this->app_id = $v;
			$this->modifiedColumns[] = LivePeer::APP_ID;
		}

		return $this;
	} // setAppId()

	/**
	 * Set the value of [composer] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setComposer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->composer !== $v) {
			$this->composer = $v;
			$this->modifiedColumns[] = LivePeer::COMPOSER;
		}

		return $this;
	} // setComposer()

	/**
	 * Set the value of [duration] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setDuration($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->duration !== $v) {
			$this->duration = $v;
			$this->modifiedColumns[] = LivePeer::DURATION;
		}

		return $this;
	} // setDuration()

	/**
	 * Sets the value of [expired_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Live The current object (for fluent API support)
	 */
	public function setExpiredAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->expired_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->expired_at !== null && $tmpDt = new DateTime($this->expired_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->expired_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LivePeer::EXPIRED_AT;
			}
		} // if either are not null

		return $this;
	} // setExpiredAt()

	/**
	 * Set the value of [explanation] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setExplanation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->explanation !== $v) {
			$this->explanation = $v;
			$this->modifiedColumns[] = LivePeer::EXPLANATION;
		}

		return $this;
	} // setExplanation()

	/**
	 * Set the value of [genre_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setGenreId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->genre_id !== $v) {
			$this->genre_id = $v;
			$this->modifiedColumns[] = LivePeer::GENRE_ID;
		}

		return $this;
	} // setGenreId()

	/**
	 * Set the value of [has_preview] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setHasPreview($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->has_preview !== $v) {
			$this->has_preview = $v;
			$this->modifiedColumns[] = LivePeer::HAS_PREVIEW;
		}

		return $this;
	} // setHasPreview()

	/**
	 * Set the value of [is_priced] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setIsPriced($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->is_priced !== $v) {
			$this->is_priced = $v;
			$this->modifiedColumns[] = LivePeer::IS_PRICED;
		}

		return $this;
	} // setIsPriced()

	/**
	 * Set the value of [kind] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setKind($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->kind !== $v) {
			$this->kind = $v;
			$this->modifiedColumns[] = LivePeer::KIND;
		}

		return $this;
	} // setKind()

	/**
	 * Set the value of [price] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setPrice($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->price !== $v) {
			$this->price = $v;
			$this->modifiedColumns[] = LivePeer::PRICE;
		}

		return $this;
	} // setPrice()

	/**
	 * Set the value of [sub_title] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setSubTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sub_title !== $v) {
			$this->sub_title = $v;
			$this->modifiedColumns[] = LivePeer::SUB_TITLE;
		}

		return $this;
	} // setSubTitle()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = LivePeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [rating] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setRating($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rating !== $v) {
			$this->rating = $v;
			$this->modifiedColumns[] = LivePeer::RATING;
		}

		return $this;
	} // setRating()

	/**
	 * Set the value of [share_text] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setShareText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->share_text !== $v) {
			$this->share_text = $v;
			$this->modifiedColumns[] = LivePeer::SHARE_TEXT;
		}

		return $this;
	} // setShareText()

	/**
	 * Set the value of [thumbnail_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setThumbnailUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thumbnail_url !== $v) {
			$this->thumbnail_url = $v;
			$this->modifiedColumns[] = LivePeer::THUMBNAIL_URL;
		}

		return $this;
	} // setThumbnailUrl()

	/**
	 * Set the value of [thumbnail_size] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setThumbnailSize($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->thumbnail_size !== $v) {
			$this->thumbnail_size = $v;
			$this->modifiedColumns[] = LivePeer::THUMBNAIL_SIZE;
		}

		return $this;
	} // setThumbnailSize()

	/**
	 * Set the value of [preview_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setPreviewUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->preview_url !== $v) {
			$this->preview_url = $v;
			$this->modifiedColumns[] = LivePeer::PREVIEW_URL;
		}

		return $this;
	} // setPreviewUrl()

	/**
	 * Set the value of [preview_size] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setPreviewSize($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->preview_size !== $v) {
			$this->preview_size = $v;
			$this->modifiedColumns[] = LivePeer::PREVIEW_SIZE;
		}

		return $this;
	} // setPreviewSize()

	/**
	 * Set the value of [preview_key] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setPreviewKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->preview_key !== $v) {
			$this->preview_key = $v;
			$this->modifiedColumns[] = LivePeer::PREVIEW_KEY;
		}

		return $this;
	} // setPreviewKey()

	/**
	 * Set the value of [drm_preview_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setDrmPreviewUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->drm_preview_url !== $v) {
			$this->drm_preview_url = $v;
			$this->modifiedColumns[] = LivePeer::DRM_PREVIEW_URL;
		}

		return $this;
	} // setDrmPreviewUrl()

	/**
	 * Set the value of [drm_preview_size] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setDrmPreviewSize($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->drm_preview_size !== $v) {
			$this->drm_preview_size = $v;
			$this->modifiedColumns[] = LivePeer::DRM_PREVIEW_SIZE;
		}

		return $this;
	} // setDrmPreviewSize()

	/**
	 * Set the value of [drm_preview_key] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setDrmPreviewKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->drm_preview_key !== $v) {
			$this->drm_preview_key = $v;
			$this->modifiedColumns[] = LivePeer::DRM_PREVIEW_KEY;
		}

		return $this;
	} // setDrmPreviewKey()

	/**
	 * Set the value of [video_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setVideoUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->video_url !== $v) {
			$this->video_url = $v;
			$this->modifiedColumns[] = LivePeer::VIDEO_URL;
		}

		return $this;
	} // setVideoUrl()

	/**
	 * Set the value of [video_size] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setVideoSize($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->video_size !== $v) {
			$this->video_size = $v;
			$this->modifiedColumns[] = LivePeer::VIDEO_SIZE;
		}

		return $this;
	} // setVideoSize()

	/**
	 * Set the value of [video_key] column.
	 * 
	 * @param      string $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setVideoKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->video_key !== $v) {
			$this->video_key = $v;
			$this->modifiedColumns[] = LivePeer::VIDEO_KEY;
		}

		return $this;
	} // setVideoKey()

	/**
	 * Set the value of [pending] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setPending($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pending !== $v) {
			$this->pending = $v;
			$this->modifiedColumns[] = LivePeer::PENDING;
		}

		return $this;
	} // setPending()

	/**
	 * Set the value of [del_flg] column.
	 * 
	 * @param      int $v new value
	 * @return     Live The current object (for fluent API support)
	 */
	public function setDelFlg($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->del_flg !== $v || $this->isNew()) {
			$this->del_flg = $v;
			$this->modifiedColumns[] = LivePeer::DEL_FLG;
		}

		return $this;
	} // setDelFlg()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Live The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LivePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Live The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LivePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->del_flg !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->app_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->composer = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->duration = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->expired_at = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->explanation = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->genre_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->has_preview = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->is_priced = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->kind = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->price = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->sub_title = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->title = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->rating = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->share_text = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->thumbnail_url = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->thumbnail_size = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->preview_url = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->preview_size = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->preview_key = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->drm_preview_url = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->drm_preview_size = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->drm_preview_key = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->video_url = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->video_size = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->video_key = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->pending = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->del_flg = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->created_at = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->updated_at = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 30; // 30 = LivePeer::NUM_COLUMNS - LivePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Live object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LivePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = LivePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LivePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseLive:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				LivePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseLive:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LivePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseLive:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(LivePeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(LivePeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseLive:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				LivePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = LivePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = LivePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += LivePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = LivePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LivePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getAppId();
				break;
			case 2:
				return $this->getComposer();
				break;
			case 3:
				return $this->getDuration();
				break;
			case 4:
				return $this->getExpiredAt();
				break;
			case 5:
				return $this->getExplanation();
				break;
			case 6:
				return $this->getGenreId();
				break;
			case 7:
				return $this->getHasPreview();
				break;
			case 8:
				return $this->getIsPriced();
				break;
			case 9:
				return $this->getKind();
				break;
			case 10:
				return $this->getPrice();
				break;
			case 11:
				return $this->getSubTitle();
				break;
			case 12:
				return $this->getTitle();
				break;
			case 13:
				return $this->getRating();
				break;
			case 14:
				return $this->getShareText();
				break;
			case 15:
				return $this->getThumbnailUrl();
				break;
			case 16:
				return $this->getThumbnailSize();
				break;
			case 17:
				return $this->getPreviewUrl();
				break;
			case 18:
				return $this->getPreviewSize();
				break;
			case 19:
				return $this->getPreviewKey();
				break;
			case 20:
				return $this->getDrmPreviewUrl();
				break;
			case 21:
				return $this->getDrmPreviewSize();
				break;
			case 22:
				return $this->getDrmPreviewKey();
				break;
			case 23:
				return $this->getVideoUrl();
				break;
			case 24:
				return $this->getVideoSize();
				break;
			case 25:
				return $this->getVideoKey();
				break;
			case 26:
				return $this->getPending();
				break;
			case 27:
				return $this->getDelFlg();
				break;
			case 28:
				return $this->getCreatedAt();
				break;
			case 29:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = LivePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getAppId(),
			$keys[2] => $this->getComposer(),
			$keys[3] => $this->getDuration(),
			$keys[4] => $this->getExpiredAt(),
			$keys[5] => $this->getExplanation(),
			$keys[6] => $this->getGenreId(),
			$keys[7] => $this->getHasPreview(),
			$keys[8] => $this->getIsPriced(),
			$keys[9] => $this->getKind(),
			$keys[10] => $this->getPrice(),
			$keys[11] => $this->getSubTitle(),
			$keys[12] => $this->getTitle(),
			$keys[13] => $this->getRating(),
			$keys[14] => $this->getShareText(),
			$keys[15] => $this->getThumbnailUrl(),
			$keys[16] => $this->getThumbnailSize(),
			$keys[17] => $this->getPreviewUrl(),
			$keys[18] => $this->getPreviewSize(),
			$keys[19] => $this->getPreviewKey(),
			$keys[20] => $this->getDrmPreviewUrl(),
			$keys[21] => $this->getDrmPreviewSize(),
			$keys[22] => $this->getDrmPreviewKey(),
			$keys[23] => $this->getVideoUrl(),
			$keys[24] => $this->getVideoSize(),
			$keys[25] => $this->getVideoKey(),
			$keys[26] => $this->getPending(),
			$keys[27] => $this->getDelFlg(),
			$keys[28] => $this->getCreatedAt(),
			$keys[29] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LivePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setAppId($value);
				break;
			case 2:
				$this->setComposer($value);
				break;
			case 3:
				$this->setDuration($value);
				break;
			case 4:
				$this->setExpiredAt($value);
				break;
			case 5:
				$this->setExplanation($value);
				break;
			case 6:
				$this->setGenreId($value);
				break;
			case 7:
				$this->setHasPreview($value);
				break;
			case 8:
				$this->setIsPriced($value);
				break;
			case 9:
				$this->setKind($value);
				break;
			case 10:
				$this->setPrice($value);
				break;
			case 11:
				$this->setSubTitle($value);
				break;
			case 12:
				$this->setTitle($value);
				break;
			case 13:
				$this->setRating($value);
				break;
			case 14:
				$this->setShareText($value);
				break;
			case 15:
				$this->setThumbnailUrl($value);
				break;
			case 16:
				$this->setThumbnailSize($value);
				break;
			case 17:
				$this->setPreviewUrl($value);
				break;
			case 18:
				$this->setPreviewSize($value);
				break;
			case 19:
				$this->setPreviewKey($value);
				break;
			case 20:
				$this->setDrmPreviewUrl($value);
				break;
			case 21:
				$this->setDrmPreviewSize($value);
				break;
			case 22:
				$this->setDrmPreviewKey($value);
				break;
			case 23:
				$this->setVideoUrl($value);
				break;
			case 24:
				$this->setVideoSize($value);
				break;
			case 25:
				$this->setVideoKey($value);
				break;
			case 26:
				$this->setPending($value);
				break;
			case 27:
				$this->setDelFlg($value);
				break;
			case 28:
				$this->setCreatedAt($value);
				break;
			case 29:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = LivePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAppId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setComposer($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDuration($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setExpiredAt($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setExplanation($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setGenreId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setHasPreview($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIsPriced($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setKind($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPrice($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setSubTitle($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTitle($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setRating($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setShareText($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setThumbnailUrl($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setThumbnailSize($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPreviewUrl($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPreviewSize($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPreviewKey($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDrmPreviewUrl($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setDrmPreviewSize($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setDrmPreviewKey($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setVideoUrl($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setVideoSize($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setVideoKey($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPending($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setDelFlg($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCreatedAt($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setUpdatedAt($arr[$keys[29]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(LivePeer::DATABASE_NAME);

		if ($this->isColumnModified(LivePeer::ID)) $criteria->add(LivePeer::ID, $this->id);
		if ($this->isColumnModified(LivePeer::APP_ID)) $criteria->add(LivePeer::APP_ID, $this->app_id);
		if ($this->isColumnModified(LivePeer::COMPOSER)) $criteria->add(LivePeer::COMPOSER, $this->composer);
		if ($this->isColumnModified(LivePeer::DURATION)) $criteria->add(LivePeer::DURATION, $this->duration);
		if ($this->isColumnModified(LivePeer::EXPIRED_AT)) $criteria->add(LivePeer::EXPIRED_AT, $this->expired_at);
		if ($this->isColumnModified(LivePeer::EXPLANATION)) $criteria->add(LivePeer::EXPLANATION, $this->explanation);
		if ($this->isColumnModified(LivePeer::GENRE_ID)) $criteria->add(LivePeer::GENRE_ID, $this->genre_id);
		if ($this->isColumnModified(LivePeer::HAS_PREVIEW)) $criteria->add(LivePeer::HAS_PREVIEW, $this->has_preview);
		if ($this->isColumnModified(LivePeer::IS_PRICED)) $criteria->add(LivePeer::IS_PRICED, $this->is_priced);
		if ($this->isColumnModified(LivePeer::KIND)) $criteria->add(LivePeer::KIND, $this->kind);
		if ($this->isColumnModified(LivePeer::PRICE)) $criteria->add(LivePeer::PRICE, $this->price);
		if ($this->isColumnModified(LivePeer::SUB_TITLE)) $criteria->add(LivePeer::SUB_TITLE, $this->sub_title);
		if ($this->isColumnModified(LivePeer::TITLE)) $criteria->add(LivePeer::TITLE, $this->title);
		if ($this->isColumnModified(LivePeer::RATING)) $criteria->add(LivePeer::RATING, $this->rating);
		if ($this->isColumnModified(LivePeer::SHARE_TEXT)) $criteria->add(LivePeer::SHARE_TEXT, $this->share_text);
		if ($this->isColumnModified(LivePeer::THUMBNAIL_URL)) $criteria->add(LivePeer::THUMBNAIL_URL, $this->thumbnail_url);
		if ($this->isColumnModified(LivePeer::THUMBNAIL_SIZE)) $criteria->add(LivePeer::THUMBNAIL_SIZE, $this->thumbnail_size);
		if ($this->isColumnModified(LivePeer::PREVIEW_URL)) $criteria->add(LivePeer::PREVIEW_URL, $this->preview_url);
		if ($this->isColumnModified(LivePeer::PREVIEW_SIZE)) $criteria->add(LivePeer::PREVIEW_SIZE, $this->preview_size);
		if ($this->isColumnModified(LivePeer::PREVIEW_KEY)) $criteria->add(LivePeer::PREVIEW_KEY, $this->preview_key);
		if ($this->isColumnModified(LivePeer::DRM_PREVIEW_URL)) $criteria->add(LivePeer::DRM_PREVIEW_URL, $this->drm_preview_url);
		if ($this->isColumnModified(LivePeer::DRM_PREVIEW_SIZE)) $criteria->add(LivePeer::DRM_PREVIEW_SIZE, $this->drm_preview_size);
		if ($this->isColumnModified(LivePeer::DRM_PREVIEW_KEY)) $criteria->add(LivePeer::DRM_PREVIEW_KEY, $this->drm_preview_key);
		if ($this->isColumnModified(LivePeer::VIDEO_URL)) $criteria->add(LivePeer::VIDEO_URL, $this->video_url);
		if ($this->isColumnModified(LivePeer::VIDEO_SIZE)) $criteria->add(LivePeer::VIDEO_SIZE, $this->video_size);
		if ($this->isColumnModified(LivePeer::VIDEO_KEY)) $criteria->add(LivePeer::VIDEO_KEY, $this->video_key);
		if ($this->isColumnModified(LivePeer::PENDING)) $criteria->add(LivePeer::PENDING, $this->pending);
		if ($this->isColumnModified(LivePeer::DEL_FLG)) $criteria->add(LivePeer::DEL_FLG, $this->del_flg);
		if ($this->isColumnModified(LivePeer::CREATED_AT)) $criteria->add(LivePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(LivePeer::UPDATED_AT)) $criteria->add(LivePeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(LivePeer::DATABASE_NAME);

		$criteria->add(LivePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Live (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAppId($this->app_id);

		$copyObj->setComposer($this->composer);

		$copyObj->setDuration($this->duration);

		$copyObj->setExpiredAt($this->expired_at);

		$copyObj->setExplanation($this->explanation);

		$copyObj->setGenreId($this->genre_id);

		$copyObj->setHasPreview($this->has_preview);

		$copyObj->setIsPriced($this->is_priced);

		$copyObj->setKind($this->kind);

		$copyObj->setPrice($this->price);

		$copyObj->setSubTitle($this->sub_title);

		$copyObj->setTitle($this->title);

		$copyObj->setRating($this->rating);

		$copyObj->setShareText($this->share_text);

		$copyObj->setThumbnailUrl($this->thumbnail_url);

		$copyObj->setThumbnailSize($this->thumbnail_size);

		$copyObj->setPreviewUrl($this->preview_url);

		$copyObj->setPreviewSize($this->preview_size);

		$copyObj->setPreviewKey($this->preview_key);

		$copyObj->setDrmPreviewUrl($this->drm_preview_url);

		$copyObj->setDrmPreviewSize($this->drm_preview_size);

		$copyObj->setDrmPreviewKey($this->drm_preview_key);

		$copyObj->setVideoUrl($this->video_url);

		$copyObj->setVideoSize($this->video_size);

		$copyObj->setVideoKey($this->video_key);

		$copyObj->setPending($this->pending);

		$copyObj->setDelFlg($this->del_flg);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Live Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     LivePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new LivePeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseLive:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseLive::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseLive
