<?php


/**
 * This class defines the structure of the 'app' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Dec 13 16:31:05 2017
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class AppTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.AppTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('app');
		$this->setPhpName('App');
		$this->setClassname('App');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, 11, null);
		$this->addColumn('NAME', 'Name', 'LONGVARCHAR', true, null, null);
		$this->addColumn('CLIENT_ID', 'ClientId', 'INTEGER', true, 11, null);
		$this->addColumn('MCN_ID', 'McnId', 'INTEGER', true, 11, 0);
		$this->addColumn('GETGLUE_OBJECT', 'GetglueObject', 'LONGVARCHAR', true, null, null);
		$this->addColumn('GETGLUE_SOURCE', 'GetglueSource', 'LONGVARCHAR', true, null, null);
		$this->addColumn('FACEBOOK_APP', 'FacebookApp', 'LONGVARCHAR', true, null, null);
		$this->addColumn('TWITTER_CONSUMER_KEY', 'TwitterConsumerKey', 'LONGVARCHAR', true, null, null);
		$this->addColumn('TWITTER_CONSUMER_SECRET', 'TwitterConsumerSecret', 'LONGVARCHAR', true, null, null);
		$this->addColumn('IAB_PUBLIC', 'IabPublic', 'LONGVARCHAR', true, null, null);
		$this->addColumn('KIIP_APP_KEY', 'KiipAppKey', 'LONGVARCHAR', true, null, null);
		$this->addColumn('KIIP_APP_SECRET', 'KiipAppSecret', 'LONGVARCHAR', true, null, null);
		$this->addColumn('KIIP_ANDROID_APP_KEY', 'KiipAndroidAppKey', 'LONGVARCHAR', true, null, null);
		$this->addColumn('KIIP_ANDROID_APP_SECRET', 'KiipAndroidAppSecret', 'LONGVARCHAR', true, null, null);
		$this->addColumn('SECRET', 'Secret', 'LONGVARCHAR', true, null, null);
		$this->addColumn('CATEGORY', 'Category', 'LONGVARCHAR', true, null, null);
		$this->addColumn('SUB_CATEGORY', 'SubCategory', 'LONGVARCHAR', true, null, null);
		$this->addColumn('STORE_APP_NAME', 'StoreAppName', 'LONGVARCHAR', true, null, null);
		$this->addColumn('DESCRIPTION', 'Description', 'LONGVARCHAR', true, null, null);
		$this->addColumn('KEY_WORD', 'KeyWord', 'LONGVARCHAR', true, null, null);
		$this->addColumn('ICON_IMAGE', 'IconImage', 'LONGVARCHAR', true, null, null);
		$this->addColumn('SPLASH_IMAGE', 'SplashImage', 'LONGVARCHAR', true, null, null);
		$this->addColumn('BACKGROUND_IMAGE', 'BackgroundImage', 'LONGVARCHAR', true, null, null);
		$this->addColumn('SCREEN_SHOT_1', 'ScreenShot1', 'LONGVARCHAR', true, null, null);
		$this->addColumn('SCREEN_SHOT_2', 'ScreenShot2', 'LONGVARCHAR', true, null, null);
		$this->addColumn('SCREEN_SHOT_3', 'ScreenShot3', 'LONGVARCHAR', true, null, null);
		$this->addColumn('SCREEN_SHOT_4', 'ScreenShot4', 'LONGVARCHAR', true, null, null);
		$this->addColumn('SCREEN_SHOT_5', 'ScreenShot5', 'LONGVARCHAR', true, null, null);
		$this->addColumn('APK_URL', 'ApkUrl', 'LONGVARCHAR', true, null, null);
		$this->addColumn('STATUS', 'Status', 'INTEGER', true, 11, 0);
		$this->addColumn('STATUS_TEXT', 'StatusText', 'LONGVARCHAR', true, null, null);
		$this->addColumn('MODIFY', 'Modify', 'INTEGER', true, 11, 0);
		$this->addColumn('CURRENT_PROCESS', 'CurrentProcess', 'INTEGER', true, 11, 0);
		$this->addColumn('PICTURE_NOTIFICATION', 'PictureNotification', 'INTEGER', true, 11, 0);
		$this->addColumn('TERMS_ACCEPTED_AT', 'TermsAcceptedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('DEL_FLG', 'DelFlg', 'INTEGER', true, 11, 0);
		$this->addColumn('RELEASED_AT', 'ReleasedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
		);
	} // getBehaviors()

} // AppTableMap
